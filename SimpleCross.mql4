#property copyright "monakafx"
#property link      "https://github.com/monakafx"
#property version   "1.00"
#property strict

// 入力パラメータ
input int shortPeriod    = 5;
input int longPeriod     = 25;
input int stopLossPips   = 5;
input int takeProfitPips = 9;

// 定数
string SYMBOL = NULL; // 対象通貨ペア(NULLは現在のチャートの通貨ペアを表す)
int TIME_FRAME = PERIOD_CURRENT; // チャートの時間足(PERIOD_CURRENTは現在のチャートの時間足を表す)

// Tick更新毎に実行されるコールバック関数
void OnTick() {
    // 最新のローソクが発生直後でない場合、何もしない
    if( isNewCandle() ) { return; }

    // 1本前のMAを取得する
    double shortMa1 = iMA(SYMBOL, TIME_FRAME, shortPeriod, 0, 0, 0, 1);
    double longMa1 = iMA(SYMBOL, TIME_FRAME, longPeriod, 0, 0, 0, 1);

    // 2本前のMAを取得する
    double shortMa2 = iMA(SYMBOL, TIME_FRAME, shortPeriod, 0, 0, 0, 2);
    double longMa2 = iMA(SYMBOL, TIME_FRAME, longPeriod, 0, 0, 0, 2);

    // MAが交差した場合エントリーする
    if( shortMa1 < longMa1 && shortMa2 > longMa2 ) {
        // 買いでエントリーする

        // 利確・損切する値段
        double tp = Ask + takeProfitPips / 100.0;
        double sl = Ask - stopLossPips / 100.0;

        // 注文を送信する
        OrderSend( SYMBOL, OP_BUY, 1, Ask, 3, sl, tp, "BUY", 0, 0, Blue );
    } else if( shortMa1 > longMa1 && shortMa2 < longMa2 ) {
        // 売りでエントリーする

        // 利確・損切する値段
        double tp = Bid - takeProfitPips / 100.0;
        double sl = Bid + stopLossPips / 100.0;

        // 注文を送信する
        OrderSend( SYMBOL, OP_SELL, 1, Bid, 3, sl, tp, "SELL", 0, 0, Red );
    }
}


// 最新のバーが発生した直後か？
bool isNewCandle() {
    return Volume[0] == 0;
}
